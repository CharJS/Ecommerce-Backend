datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  firstName        String
  lastName         String
  email            String            @unique
  password         String
  role             Role
  phone            String?
  address          Address?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  sessions         Session[]
  sellerProducts   SellerProducts?
  purchaseHistory  PurchaseHistory?
  cart             Cart?
  favoriteProducts FavoriteProduct[]

  @@map("users")
}

model Product {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  name         String            @unique
  description  String
  categoryId   String            @db.ObjectId
  category     Category          @relation(fields: [categoryId], references: [id])
  imageUrl     String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  listings     ProductListing[]
  ProductOrder ProductOrder[]
  cartItems    CartItem[]
  favoriteOf   FavoriteProduct[]

  @@map("products")
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model SellerProducts {
  id       String           @id @default(auto()) @map("_id") @db.ObjectId
  seller   User             @relation(fields: [sellerId], references: [id])
  sellerId String           @unique @db.ObjectId
  listings ProductListing[]

  @@map("seller_products")
}

model ProductListing {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  product          Product        @relation(fields: [productId], references: [id])
  productId        String         @db.ObjectId
  sellerProducts   SellerProducts @relation(fields: [sellerProductsId], references: [id])
  sellerProductsId String         @db.ObjectId
  stock            Int
  price            Float
  listedDate       DateTime       @default(now())

  @@unique([productId, sellerProductsId])
  @@map("product_listings")
}

model PurchaseHistory {
  id      String         @id @default(auto()) @map("_id") @db.ObjectId
  buyer   User           @relation(fields: [buyerId], references: [id])
  buyerId String         @unique @db.ObjectId
  orders  ProductOrder[]

  @@map("purchase_histories")
}

model ProductOrder {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  productListing    Product         @relation(fields: [productListingId], references: [id])
  productListingId  String          @db.ObjectId
  purchaseHistory   PurchaseHistory @relation(fields: [purchaseHistoryId], references: [id])
  purchaseHistoryId String          @db.ObjectId
  quantity          Int
  purchaseDate      DateTime        @default(now())
  status            OrderStatus

  @@unique([productListingId, purchaseHistoryId])
  @@map("product_orders")
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  @@map("cart_items")
}

model FavoriteProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  addedAt   DateTime @default(now())

  @@unique([userId, productId])
  @@map("favorite_products")
}

enum Role {
  BUYER
  SELLER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

type Address {
  street     String
  city       String
  state      String
  postalCode String
  country    String
}
